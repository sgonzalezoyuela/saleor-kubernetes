kubernetes_namespace.saleor[0]: Refreshing state... [id=saleor-demo]
module.saleor_platform.kubernetes_config_map.db_init_script: Refreshing state... [id=saleor-demo/db-init-script]
module.saleor_platform.kubernetes_service.saleor_db: Refreshing state... [id=saleor-demo/saleor-db]
module.saleor_platform.kubernetes_config_map.saleor_common_env: Refreshing state... [id=saleor-demo/saleor-common-env]
module.saleor_platform.kubernetes_service.saleor_redis: Refreshing state... [id=saleor-demo/saleor-redis]
module.saleor_platform.kubernetes_service.saleor_jaeger: Refreshing state... [id=saleor-demo/saleor-jaeger]
module.saleor_platform.kubernetes_persistent_volume_claim.saleor_redis: Refreshing state... [id=saleor-demo/saleor-redis-pvc]
module.saleor_platform.kubernetes_service.saleor_dashboard: Refreshing state... [id=saleor-demo/saleor-dashboard]
module.saleor_platform.kubernetes_service.saleor_mailpit: Refreshing state... [id=saleor-demo/saleor-mailpit]
module.saleor_platform.kubernetes_deployment.saleor_jaeger: Refreshing state... [id=saleor-demo/saleor-jaeger]
module.saleor_platform.kubernetes_deployment.saleor_mailpit: Refreshing state... [id=saleor-demo/saleor-mailpit]
module.saleor_platform.kubernetes_persistent_volume_claim.saleor_db: Refreshing state... [id=saleor-demo/saleor-db-pvc]
module.saleor_platform.kubernetes_persistent_volume_claim.saleor_media: Refreshing state... [id=saleor-demo/saleor-media-pvc]
module.saleor_platform.kubernetes_service.saleor_api: Refreshing state... [id=saleor-demo/saleor-api]
module.saleor_platform.kubernetes_deployment.saleor_redis: Refreshing state... [id=saleor-demo/saleor-redis]
module.saleor_platform.kubernetes_config_map.saleor_backend_env: Refreshing state... [id=saleor-demo/saleor-backend-env]
module.saleor_platform.kubernetes_deployment.saleor_db: Refreshing state... [id=saleor-demo/saleor-db]
module.saleor_platform.kubernetes_deployment.saleor_api: Refreshing state... [id=saleor-demo/saleor-api]
module.saleor_platform.kubernetes_deployment.saleor_worker: Refreshing state... [id=saleor-demo/saleor-worker]
module.saleor_platform.kubernetes_deployment.saleor_dashboard: Refreshing state... [id=saleor-demo/saleor-dashboard]
module.dummy_payement_app.kubernetes_service.payment_app[0]: Refreshing state... [id=saleor-demo/dummy-payment-app]
module.saleor_storefront.kubernetes_service.saleor_storefront[0]: Refreshing state... [id=saleor-demo/saleor-storefront]
module.saleor_storefront.kubernetes_deployment.saleor_storefront[0]: Refreshing state... [id=saleor-demo/saleor-storefront]
module.dummy_payement_app.kubernetes_deployment.payment_app[0]: Refreshing state... [id=saleor-demo/dummy-payment-app]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

  # kubernetes_namespace.saleor[0] has been deleted
  - resource "kubernetes_namespace" "saleor" {
        id                               = "saleor-demo"
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-demo" -> null
            # (5 unchanged attributes hidden)
        }
    }

  # module.dummy_payement_app.kubernetes_service.payment_app[0] has been deleted
  - resource "kubernetes_service" "payment_app" {
        id                     = "saleor-demo/dummy-payment-app"
      - status                 = [
          - {
              - load_balancer = [
                  - {
                      - ingress = []
                    },
                ]
            },
        ] -> null
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "dummy-payment-app" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_config_map.db_init_script has been deleted
  - resource "kubernetes_config_map" "db_init_script" {
        id        = "saleor-demo/db-init-script"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "db-init-script" -> null
            # (6 unchanged attributes hidden)
        }
    }

  # module.saleor_platform.kubernetes_config_map.saleor_backend_env has been deleted
  - resource "kubernetes_config_map" "saleor_backend_env" {
        id        = "saleor-demo/saleor-backend-env"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-backend-env" -> null
            # (6 unchanged attributes hidden)
        }
    }

  # module.saleor_platform.kubernetes_config_map.saleor_common_env has been deleted
  - resource "kubernetes_config_map" "saleor_common_env" {
        id        = "saleor-demo/saleor-common-env"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-common-env" -> null
            # (6 unchanged attributes hidden)
        }
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_db has been deleted
  - resource "kubernetes_persistent_volume_claim" "saleor_db" {
        id               = "saleor-demo/saleor-db-pvc"
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-db-pvc" -> null
            # (6 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_media has been deleted
  - resource "kubernetes_persistent_volume_claim" "saleor_media" {
        id               = "saleor-demo/saleor-media-pvc"
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-media-pvc" -> null
            # (6 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_redis has been deleted
  - resource "kubernetes_persistent_volume_claim" "saleor_redis" {
        id               = "saleor-demo/saleor-redis-pvc"
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-redis-pvc" -> null
            # (6 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_api has been deleted
  - resource "kubernetes_service" "saleor_api" {
        id                     = "saleor-demo/saleor-api"
      - status                 = [
          - {
              - load_balancer = [
                  - {
                      - ingress = [
                          - {
                              - ip       = "34.67.213.239"
                                # (1 unchanged attribute hidden)
                            },
                        ]
                    },
                ]
            },
        ] -> null
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-api" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_dashboard has been deleted
  - resource "kubernetes_service" "saleor_dashboard" {
        id                     = "saleor-demo/saleor-dashboard"
      - status                 = [
          - {
              - load_balancer = [
                  - {
                      - ingress = []
                    },
                ]
            },
        ] -> null
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-dashboard" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_db has been deleted
  - resource "kubernetes_service" "saleor_db" {
        id                     = "saleor-demo/saleor-db"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-db" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_jaeger has been deleted
  - resource "kubernetes_service" "saleor_jaeger" {
        id                     = "saleor-demo/saleor-jaeger"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-jaeger" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_mailpit has been deleted
  - resource "kubernetes_service" "saleor_mailpit" {
        id                     = "saleor-demo/saleor-mailpit"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-mailpit" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_platform.kubernetes_service.saleor_redis has been deleted
  - resource "kubernetes_service" "saleor_redis" {
        id                     = "saleor-demo/saleor-redis"
        # (2 unchanged attributes hidden)

      - metadata {
          - name             = "saleor-redis" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }

  # module.saleor_storefront.kubernetes_service.saleor_storefront[0] has been deleted
  - resource "kubernetes_service" "saleor_storefront" {
        id                     = "saleor-demo/saleor-storefront"
      - status                 = [
          - {
              - load_balancer = [
                  - {
                      - ingress = []
                    },
                ]
            },
        ] -> null
        # (1 unchanged attribute hidden)

      - metadata {
          - name             = "saleor-storefront" -> null
            # (7 unchanged attributes hidden)
        }

        # (1 unchanged block hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.

─────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_namespace.saleor[0] will be created
  + resource "kubernetes_namespace" "saleor" {
      + id                               = (known after apply)
      + wait_for_default_service_account = false

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "environment" = "gke"
              + "name"        = "saleor-demo"
            }
          + name             = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.dummy_payement_app.kubernetes_deployment.payment_app[0] will be created
  + resource "kubernetes_deployment" "payment_app" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "payment"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "dummy-payment-app"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "dummy-payment-app"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "dummy-payment-app"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "dummy-payment-app"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + args                       = [
                          + <<-EOT
                                echo "installing ..."
                                apk add git pnpm
                                git clone https://github.com/saleor/dummy-payment-app.git
                                cd dummy-payment-app
                                
                                echo "building ..."
                                npm install --global corepack@latest
                                corepack enable pnpm
                                pnpm install
                                
                                echo "starting ..."
                                pnpm dev
                            EOT,
                        ]
                      + command                    = [
                          + "sh",
                          + "-c",
                        ]
                      + image                      = "node:20-alpine"
                      + image_pull_policy          = (known after apply)
                      + name                       = "app"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "APP_API_BASE_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "APP_IFRAME_BASE_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "PORT"
                          + value = "3000"
                        }

                      + port {
                          + container_port = 3000
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "2000m"
                              + "memory" = "2Gi"
                            }
                          + requests = {
                              + "cpu"    = "1000m"
                              + "memory" = "1Gi"
                            }
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)
                }
            }
        }
    }

  # module.dummy_payement_app.kubernetes_service.payment_app[0] will be created
  + resource "kubernetes_service" "payment_app" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "payment"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "dummy-payment-app"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "dummy-payment-app"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "dummy-payment-app"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 3000
              + protocol    = "TCP"
              + target_port = "3000"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_config_map.db_init_script will be created
  + resource "kubernetes_config_map" "db_init_script" {
      + data = {
          + "replica_user.sql" = <<-EOT
                -- Script being executed on DB init, creates read only user
                -- for replicas purposes.
                CREATE USER saleor_read_only WITH PASSWORD 'saleor';
                GRANT CONNECT ON DATABASE saleor TO saleor_read_only;
                GRANT USAGE ON SCHEMA public TO saleor_read_only;
                GRANT SELECT ON ALL TABLES IN SCHEMA public TO saleor_read_only;
                ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO saleor_read_only;
            EOT
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "db-init-script"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_config_map.saleor_backend_env will be created
  + resource "kubernetes_config_map" "saleor_backend_env" {
      + data = (known after apply)
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-backend-env"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_config_map.saleor_common_env will be created
  + resource "kubernetes_config_map" "saleor_common_env" {
      + data = {
          + "CELERY_BROKER_URL"           = "redis://saleor-redis:6379/1"
          + "DATABASE_URL"                = "postgres://saleor:changeme@saleor-db:5432/saleor"
          + "DEFAULT_FROM_EMAIL"          = "noreply@example.com"
          + "EMAIL_URL"                   = "smtp://saleor-mailpit:1025"
          + "OTEL_EXPORTER_OTLP_ENDPOINT" = "http://saleor-jaeger:4317"
          + "OTEL_SERVICE_NAME"           = "saleor"
          + "OTEL_TRACES_EXPORTER"        = "otlp"
          + "SECRET_KEY"                  = "chageme"
        }
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-common-env"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_api will be created
  + resource "kubernetes_deployment" "saleor_api" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "api"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-api"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-api"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-api"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-api"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + affinity {
                      + pod_affinity {
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 100

                              + pod_affinity_term {
                                  + topology_key = "kubernetes.io/hostname"

                                  + label_selector {
                                      + match_labels = {
                                          + "group" = "saleor-platform"
                                        }
                                    }
                                }
                            }
                        }
                    }

                  + container {
                      + image                      = "ghcr.io/saleor/saleor:3.21"
                      + image_pull_policy          = (known after apply)
                      + name                       = "api"
                      + stdin                      = true
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = true

                      + env {
                          + name  = "DASHBOARD_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "ALLOWED_HOSTS"
                          + value = (known after apply)
                        }

                      + env_from {
                          + config_map_ref {
                              + name = "saleor-common-env"
                            }
                        }
                      + env_from {
                          + config_map_ref {
                              + name = "saleor-backend-env"
                            }
                        }

                      + port {
                          + container_port = 8000
                          + protocol       = "TCP"
                        }

                      + resources (known after apply)

                      + volume_mount {
                          + mount_path        = "/app/media"
                          + mount_propagation = "None"
                          + name              = "media-storage"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + init_container {
                      + command                    = [
                          + "python3",
                          + "manage.py",
                          + "migrate",
                        ]
                      + image                      = "ghcr.io/saleor/saleor:3.21"
                      + image_pull_policy          = (known after apply)
                      + name                       = "migrate"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "STATIC_URL"
                          + value = "/static/"
                        }
                      + env {
                          + name  = "DASHBOARD_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "ALLOWED_HOSTS"
                          + value = (known after apply)
                        }

                      + env_from {
                          + config_map_ref {
                              + name = "saleor-common-env"
                            }
                        }
                      + env_from {
                          + config_map_ref {
                              + name = "saleor-backend-env"
                            }
                        }

                      + resources (known after apply)

                      + volume_mount {
                          + mount_path        = "/app/media"
                          + mount_propagation = "None"
                          + name              = "media-storage"
                          + read_only         = false
                        }
                    }
                  + init_container {
                      + command                    = [
                          + "python3",
                          + "manage.py",
                          + "populatedb",
                          + "--createsuperuser",
                        ]
                      + image                      = "ghcr.io/saleor/saleor:3.21"
                      + image_pull_policy          = (known after apply)
                      + name                       = "populatedb"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "DASHBOARD_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "ALLOWED_HOSTS"
                          + value = (known after apply)
                        }

                      + env_from {
                          + config_map_ref {
                              + name = "saleor-common-env"
                            }
                        }
                      + env_from {
                          + config_map_ref {
                              + name = "saleor-backend-env"
                            }
                        }

                      + resources (known after apply)

                      + volume_mount {
                          + mount_path        = "/app/media"
                          + mount_propagation = "None"
                          + name              = "media-storage"
                          + read_only         = false
                        }
                    }

                  + readiness_gate (known after apply)

                  + volume {
                      + name = "media-storage"

                      + persistent_volume_claim {
                          + claim_name = "saleor-media-pvc"
                          + read_only  = false
                        }
                    }
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_dashboard will be created
  + resource "kubernetes_deployment" "saleor_dashboard" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "frontend"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-dashboard"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-dashboard"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-dashboard"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-dashboard"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "ghcr.io/saleor/saleor-dashboard:3.21"
                      + image_pull_policy          = (known after apply)
                      + name                       = "dashboard"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "API_URL"
                          + value = (known after apply)
                        }

                      + env_from {
                          + config_map_ref {
                              + name = "saleor-common-env"
                            }
                        }
                      + env_from {
                          + config_map_ref {
                              + name = "saleor-backend-env"
                            }
                        }

                      + port {
                          + container_port = 80
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "2048Mi"
                            }
                          + requests = {
                              + "cpu"    = "100m"
                              + "memory" = "2048Mi"
                            }
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_db will be created
  + resource "kubernetes_deployment" "saleor_db" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "database"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-db"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-db"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-db"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-db"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "library/postgres:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "postgres"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "POSTGRES_USER"
                          + value = "saleor"
                        }
                      + env {
                          + name  = "POSTGRES_PASSWORD"
                          + value = "changeme"
                        }
                      + env {
                          + name  = "POSTGRES_DB"
                          + value = "saleor"
                        }
                      + env {
                          + name  = "PGDATA"
                          + value = "/var/lib/postgresql/data/pgdata"
                        }

                      + port {
                          + container_port = 5432
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "512Mi"
                            }
                          + requests = {
                              + "cpu"    = "100m"
                              + "memory" = "256Mi"
                            }
                        }

                      + volume_mount {
                          + mount_path        = "/var/lib/postgresql/data"
                          + mount_propagation = "None"
                          + name              = "postgres-data"
                          + read_only         = false
                        }
                      + volume_mount {
                          + mount_path        = "/docker-entrypoint-initdb.d/replica_user.sql"
                          + mount_propagation = "None"
                          + name              = "init-script"
                          + read_only         = true
                          + sub_path          = "replica_user.sql"
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)

                  + volume {
                      + name = "postgres-data"

                      + persistent_volume_claim {
                          + claim_name = "saleor-db-pvc"
                          + read_only  = false
                        }
                    }
                  + volume {
                      + name = "init-script"

                      + config_map {
                          + default_mode = "0644"
                          + name         = "db-init-script"
                        }
                    }
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_jaeger will be created
  + resource "kubernetes_deployment" "saleor_jaeger" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "monitoring"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-jaeger"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-jaeger"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-jaeger"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-jaeger"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "jaegertracing/all-in-one:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "jaeger"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "COLLECTOR_OTLP_ENABLED"
                          + value = "true"
                        }

                      + port {
                          + container_port = 16686
                          + name           = "query"
                          + protocol       = "TCP"
                        }
                      + port {
                          + container_port = 4317
                          + name           = "otlp"
                          + protocol       = "TCP"
                        }
                      + port {
                          + container_port = 4318
                          + name           = "otlp-http"
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "512Mi"
                            }
                          + requests = {
                              + "cpu"    = "100m"
                              + "memory" = "256Mi"
                            }
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_mailpit will be created
  + resource "kubernetes_deployment" "saleor_mailpit" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "mail"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-mailpit"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-mailpit"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-mailpit"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "saleor-mailpit"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "axllent/mailpit:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "mailpit"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 1025
                          + name           = "smtp"
                          + protocol       = "TCP"
                        }
                      + port {
                          + container_port = 8025
                          + name           = "web"
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "512Mi"
                            }
                          + requests = {
                              + "cpu"    = "100m"
                              + "memory" = "256Mi"
                            }
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_redis will be created
  + resource "kubernetes_deployment" "saleor_redis" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "cache"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-redis"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-redis"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-redis"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-redis"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + image                      = "redis:latest"
                      + image_pull_policy          = (known after apply)
                      + name                       = "redis"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + port {
                          + container_port = 6379
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "256Mi"
                            }
                          + requests = {
                              + "cpu"    = "100m"
                              + "memory" = "128Mi"
                            }
                        }

                      + volume_mount {
                          + mount_path        = "/data"
                          + mount_propagation = "None"
                          + name              = "redis-data"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)

                  + volume {
                      + name = "redis-data"

                      + persistent_volume_claim {
                          + claim_name = "saleor-redis-pvc"
                          + read_only  = false
                        }
                    }
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_deployment.saleor_worker will be created
  + resource "kubernetes_deployment" "saleor_worker" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "worker"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-worker"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-worker"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-worker"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app"   = "saleor-worker"
                      + "group" = "saleor-platform"
                      + "tier"  = "backend"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + affinity {
                      + pod_affinity {
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 100

                              + pod_affinity_term {
                                  + topology_key = "kubernetes.io/hostname"

                                  + label_selector {
                                      + match_labels = {
                                          + "group" = "saleor-platform"
                                        }
                                    }
                                }
                            }
                        }
                    }

                  + container {
                      + command                    = [
                          + "celery",
                          + "-A",
                          + "saleor",
                          + "--app=saleor.celeryconf:app",
                          + "worker",
                          + "--loglevel=info",
                          + "-B",
                        ]
                      + image                      = "ghcr.io/saleor/saleor:3.21"
                      + image_pull_policy          = (known after apply)
                      + name                       = "worker"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env_from {
                          + config_map_ref {
                              + name = "saleor-common-env"
                            }
                        }
                      + env_from {
                          + config_map_ref {
                              + name = "saleor-backend-env"
                            }
                        }

                      + resources {
                          + limits   = {
                              + "cpu"    = "500m"
                              + "memory" = "512Gi"
                            }
                          + requests = {
                              + "cpu"    = "256m"
                              + "memory" = "256Mi"
                            }
                        }

                      + volume_mount {
                          + mount_path        = "/app/media"
                          + mount_propagation = "None"
                          + name              = "media-storage"
                          + read_only         = false
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + init_container {
                      + args                       = [
                          + <<-EOT
                                echo "Waiting for saleor-api to be ready..."
                                until nc -z saleor-api.saleor-demo.svc.cluster.local 8000; do
                                  echo "Waiting for saleor-api.saleor-demo.svc.cluster.local:8000..."
                                  sleep 5
                                done
                                echo "saleor-api is ready!"
                            EOT,
                        ]
                      + command                    = [
                          + "sh",
                          + "-c",
                        ]
                      + image                      = "busybox:1.35"
                      + image_pull_policy          = (known after apply)
                      + name                       = "wait-for-api"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + resources (known after apply)
                    }

                  + readiness_gate (known after apply)

                  + volume {
                      + name = "media-storage"

                      + persistent_volume_claim {
                          + claim_name = "saleor-media-pvc"
                          + read_only  = false
                        }
                    }
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_db will be created
  + resource "kubernetes_persistent_volume_claim" "saleor_db" {
      + id               = (known after apply)
      + wait_until_bound = false

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-db-pvc"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + access_modes       = [
              + "ReadWriteOnce",
            ]
          + storage_class_name = "standard-rwx"
          + volume_mode        = (known after apply)
          + volume_name        = (known after apply)

          + resources {
              + requests = {
                  + "storage" = "1Gi"
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_media will be created
  + resource "kubernetes_persistent_volume_claim" "saleor_media" {
      + id               = (known after apply)
      + wait_until_bound = false

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-media-pvc"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + access_modes       = [
              + "ReadWriteMany",
            ]
          + storage_class_name = "standard-rwx"
          + volume_mode        = (known after apply)
          + volume_name        = (known after apply)

          + resources {
              + requests = {
                  + "storage" = "1Gi"
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_persistent_volume_claim.saleor_redis will be created
  + resource "kubernetes_persistent_volume_claim" "saleor_redis" {
      + id               = (known after apply)
      + wait_until_bound = false

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-redis-pvc"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + access_modes       = [
              + "ReadWriteOnce",
            ]
          + storage_class_name = "standard-rwx"
          + volume_mode        = (known after apply)
          + volume_name        = (known after apply)

          + resources {
              + requests = {
                  + "storage" = "1Gi"
                }
            }
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_api will be created
  + resource "kubernetes_service" "saleor_api" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "api-service"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-api"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-api"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-api"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 8000
              + protocol    = "TCP"
              + target_port = "8000"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_dashboard will be created
  + resource "kubernetes_service" "saleor_dashboard" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "frontend"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-dashboard"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-dashboard"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-dashboard"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 9000
              + protocol    = "TCP"
              + target_port = "80"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_db will be created
  + resource "kubernetes_service" "saleor_db" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "database"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-db"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-db"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-db"
            }
          + session_affinity                  = "None"
          + type                              = "ClusterIP"

          + port {
              + node_port   = (known after apply)
              + port        = 5432
              + protocol    = "TCP"
              + target_port = "5432"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_jaeger will be created
  + resource "kubernetes_service" "saleor_jaeger" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "monitoring"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-jaeger"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-jaeger"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-jaeger"
            }
          + session_affinity                  = "None"
          + type                              = "ClusterIP"

          + port {
              + name        = "query"
              + node_port   = (known after apply)
              + port        = 16686
              + protocol    = "TCP"
              + target_port = "16686"
            }
          + port {
              + name        = "otlp"
              + node_port   = (known after apply)
              + port        = 4317
              + protocol    = "TCP"
              + target_port = "4317"
            }
          + port {
              + name        = "otlp-http"
              + node_port   = (known after apply)
              + port        = 4318
              + protocol    = "TCP"
              + target_port = "4318"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_mailpit will be created
  + resource "kubernetes_service" "saleor_mailpit" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "mail"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-mailpit"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-mailpit"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-mailpit"
            }
          + session_affinity                  = "None"
          + type                              = "ClusterIP"

          + port {
              + name        = "smtp"
              + node_port   = (known after apply)
              + port        = 1025
              + protocol    = "TCP"
              + target_port = "1025"
            }
          + port {
              + name        = "web"
              + node_port   = (known after apply)
              + port        = 8025
              + protocol    = "TCP"
              + target_port = "8025"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_platform.kubernetes_service.saleor_redis will be created
  + resource "kubernetes_service" "saleor_redis" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "cache"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-redis"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-redis"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-redis"
            }
          + session_affinity                  = "None"
          + type                              = "ClusterIP"

          + port {
              + node_port   = (known after apply)
              + port        = 6379
              + protocol    = "TCP"
              + target_port = "6379"
            }

          + session_affinity_config (known after apply)
        }
    }

  # module.saleor_storefront.kubernetes_deployment.saleor_storefront[0] will be created
  + resource "kubernetes_deployment" "saleor_storefront" {
      + id               = (known after apply)
      + wait_for_rollout = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "frontend"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-storefront"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-storefront"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + min_ready_seconds         = 0
          + paused                    = false
          + progress_deadline_seconds = 600
          + replicas                  = "1"
          + revision_history_limit    = 10

          + selector {
              + match_labels = {
                  + "app" = "saleor-storefront"
                }
            }

          + strategy (known after apply)

          + template {
              + metadata {
                  + generation       = (known after apply)
                  + labels           = {
                      + "app" = "saleor-storefront"
                    }
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                }
              + spec {
                  + automount_service_account_token  = true
                  + dns_policy                       = "ClusterFirst"
                  + enable_service_links             = true
                  + host_ipc                         = false
                  + host_network                     = false
                  + host_pid                         = false
                  + hostname                         = "storefront"
                  + node_name                        = (known after apply)
                  + restart_policy                   = "Always"
                  + scheduler_name                   = (known after apply)
                  + service_account_name             = (known after apply)
                  + share_process_namespace          = false
                  + termination_grace_period_seconds = 30

                  + container {
                      + args                       = (known after apply)
                      + command                    = [
                          + "sh",
                          + "-c",
                        ]
                      + image                      = "node:20-alpine"
                      + image_pull_policy          = (known after apply)
                      + name                       = "storefront"
                      + stdin                      = false
                      + stdin_once                 = false
                      + termination_message_path   = "/dev/termination-log"
                      + termination_message_policy = (known after apply)
                      + tty                        = false

                      + env {
                          + name  = "NEXT_PUBLIC_SALEOR_API_URL"
                          + value = (known after apply)
                        }
                      + env {
                          + name  = "NEXT_PUBLIC_STOREFRONT_URL"
                          + value = (known after apply)
                        }

                      + port {
                          + container_port = 3000
                          + protocol       = "TCP"
                        }

                      + resources {
                          + limits   = {
                              + "cpu"               = "2000m"
                              + "ephemeral-storage" = "2Gi"
                              + "memory"            = "2Gi"
                            }
                          + requests = {
                              + "cpu"               = "2000m"
                              + "ephemeral-storage" = "2Gi"
                              + "memory"            = "2Gi"
                            }
                        }
                    }

                  + image_pull_secrets (known after apply)

                  + readiness_gate (known after apply)
                }
            }
        }
    }

  # module.saleor_storefront.kubernetes_service.saleor_storefront[0] will be created
  + resource "kubernetes_service" "saleor_storefront" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/component"  = "frontend"
              + "app.kubernetes.io/managed-by" = "terraform"
              + "app.kubernetes.io/name"       = "saleor-storefront"
              + "app.kubernetes.io/part-of"    = "saleor"
              + "environment"                  = "gke"
            }
          + name             = "saleor-storefront"
          + namespace        = "saleor-demo"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app" = "saleor-storefront"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 3000
              + protocol    = "TCP"
              + target_port = "3000"
            }

          + session_affinity_config (known after apply)
        }
    }

Plan: 24 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + api_lb_ip          = (known after apply)
  + api_url            = (known after apply)
  + dashboard_lb_ip    = (known after apply)
  + dashboard_url      = (known after apply)
  - ingress_endpoints  = {} -> null
  + payment_app_url    = (known after apply)
  + payment_lb_ip      = (known after apply)
  + storefront_lb_ip   = (known after apply)
  + storefront_url     = (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
